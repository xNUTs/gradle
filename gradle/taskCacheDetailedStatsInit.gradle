/*
 * Copyright 2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.gradle.api.internal.TaskInternal
import org.gradle.api.internal.tasks.TaskExecutionOutcome
import org.gradle.internal.time.Clock

def buildClock = new Clock()
def taskInfos = []

class TaskCacheInfo {
    Class type
    boolean hasCustomActions
    TaskExecutionOutcome outcome
    boolean cacheable
    long time
}

// Keep track of a single instance of a task type
// This is to avoid duplicates introduced by different classloaders
Map<String, Class<? extends Task>> taskTypes = [:]
def internTaskType = { Class<? extends Task> type ->
    if (taskTypes.containsKey(type.name)) {
        type = taskTypes.get(type.name)
    } else {
        taskTypes.put(type.name, type)
    }
    type
}

gradle.addListener(new TaskExecutionListener() {
    Map<String, Clock> clocks = [:]

    @Override
    void beforeExecute(Task task) {
        clocks.put(task.path, new Clock())
    }

    @Override
    void afterExecute(Task task, TaskState state) {
        def clock = clocks.remove(task.path)
        def type = task.getClass()
        if (type.name.endsWith("_Decorated")) {
            type = type.superclass
        }
        type = internTaskType(type)
        def info = new TaskCacheInfo(
            type: type,
            hasCustomActions: ((TaskInternal) task).hasCustomActions,
            outcome: state.outcome,
            cacheable: state.cacheable,
            time: clock.elapsedMillis
        )
        // println " >> $info.type.name took $info.time ms"
        taskInfos.add info
    }
})
gradle.addListener(new BuildAdapter() {
    @Override
    void buildFinished(BuildResult result) {
        taskInfos.sort { a, b ->
            a.outcome <=> b.outcome
            ?: a.cacheable <=> b.cacheable
            ?: a.type.name <=> b.type.name
        }

        if (!gradle.startParameter.systemPropertiesArgs.containsKey("csv")) {
            println ""
            println "Detailed cache statistics"
            println ""
            boolean seenCustomActions = false
            println "  All tasks ${summary(taskInfos)}"
            def byOutcome = taskInfos.groupBy { it.outcome }
            byOutcome.each { outcome, taskInfosWithOutcome ->
                println "    $outcome ${summary(taskInfosWithOutcome)}"
                def byCacheability = taskInfosWithOutcome.groupBy { it.cacheable }
                byCacheability.each { cacheable, taskInfosWithCacheability ->
                    println "      ${cacheable ? "Cacheable" : "Not cacheable"} ${summary(taskInfosWithCacheability)}"
                    def byType = taskInfosWithCacheability.groupBy { it.type }
                    byType.each { type, taskInfosWithType ->
                        def byCustomActions = taskInfosWithType.groupBy { it.hasCustomActions }
                        byCustomActions.each { hasCustomActions, taskInfosWithCustomActions ->
                            println "        $type.name${hasCustomActions ? " (*)" : ""} ${summary(taskInfosWithCustomActions)}"
                            seenCustomActions = seenCustomActions || hasCustomActions
                        }
                    }
                }
            }
            if (seenCustomActions) {
                println ""
                println "  (*) denotes tasks with custom actions"
            }
        } else {
            def csv = gradle.startParameter.systemPropertiesArgs["csv"]
            PrintWriter writer = csv
                ? new PrintWriter(csv)
                : new PrintWriter(System.out)
            try {
                csvPrint writer, "Build time", buildClock.elapsedMillis
                csvPrint writer,
                    "Outcome",
                    "Cacheable",
                    "Task",
                    "Package",
                    "Count",
                    "Sum",
                    "Mean",
                    "StdDev",
                    "Min",
                    "Max"
                def byOutcome = taskInfos.groupBy { it.outcome }
                byOutcome.each { outcome, taskInfosWithOutcome ->
                    def byCacheability = taskInfosWithOutcome.groupBy { it.cacheable }
                    byCacheability.each { cacheable, taskInfosWithCacheability ->
                        def byType = taskInfosWithCacheability.groupBy { it.type }
                        byType.each { type, taskInfosWithType ->
                            def byCustomActions = taskInfosWithType.groupBy { it.hasCustomActions }
                            byCustomActions.each { hasCustomActions, taskInfosWithCustomActions ->
                                csvPrint writer, [
                                    outcome,
                                    cacheable ? "Cacheable" : "Not cacheable",
                                    type.simpleName + (hasCustomActions ? " (*)" : ""),
                                    type.package?.name ?: "",
                                    *csvSummary(taskInfosWithCustomActions)
                                ]
                            }
                        }
                    }
                }
                gradle.startParameter.properties.sort().each { k, v ->
                    writer.println([k, v].collect { quote(it) }.join(","))
                }
            } finally {
                writer.flush()
                if (csv) {
                    writer.close()
                }
            }
        }
    }
})

static String summary(Collection<TaskCacheInfo> tasks) {
    def count = tasks.size() == 1
        ? "1 task"
        : "${tasks.size()} tasks"
    def times = tasks*.time
    long sum = times.sum()

    def result = "- $count took $sum ms"
    if (times.size() > 1) {
        double mean = sum / times.size()
        double stddev = Math.sqrt(times.collect { (it - mean) * (it + mean) }.sum() / times.size())
        long min = times.min()
        long max = times.max()

        result += " (avg ${round(mean)} ms, stddev ${round(stddev)} ms, min ${min} ms, max ${max} ms)"
    }
    return result
}

static List<Object> csvSummary(Collection<TaskCacheInfo> tasks) {
    def count = tasks.size()
    def times = tasks*.time
    long sum = times.sum()
    long min = times.min()
    long max = times.max()
    double mean
    double stddev
    if (times.size() > 1) {
        mean = sum / times.size()
        stddev = Math.sqrt(times.collect { (it - mean) * (it + mean) }.sum() / times.size())
    } else {
        mean = sum
        stddev = 0
    }
    return [count, sum, mean, stddev, min, max]
}

static void csvPrint(PrintWriter writer, Object... data) {
    csvPrint writer, data as List
}

static void csvPrint(PrintWriter writer, List<?> data) {
    writer.println(data.collect { quote(it) }.join(","))
}

static String quote(def data) {
    if (data == null) {
        return ""
    }
    if (data instanceof Boolean) {
        return data
    }
    if (data instanceof Number) {
        return data
    }
    def string = data.toString().replace((char) '"', (char) '\'')
    return "\"$string\""
}

static String round(double value) {
    return String.format("%.2f", value)
}
