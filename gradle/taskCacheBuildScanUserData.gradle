/*
 * Copyright 2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.gradle.api.internal.file.FileCollectionInternal
import org.gradle.api.internal.file.FileCollectionVisitor
import org.gradle.api.internal.file.FileTreeInternal
import org.gradle.api.internal.file.collections.DirectoryFileTree
import org.gradle.caching.internal.DefaultBuildCacheKeyBuilder
import org.gradle.caching.internal.DefaultBuildCacheKeyBuilder.ByteArrayToStringer
import org.gradle.internal.classloader.ClassLoaderHierarchyHasher

pluginManager.withPlugin("com.gradle.build-scan") {
    if (gradle.startParameter.taskOutputCacheEnabled) {

        if (gradle.startParameter.parallelProjectExecutionEnabled) {
            // We have issues with concurrent listeners generating events
            // This causes deadlocks when executing tasks with this init script
            // Disable this when --parallel has been enabled
            logger.warn("Disabling task output caching diagnostics while --parallel is enabled.")
            return
        }

        ext.tasksToInvestigateForCache = project.hasProperty('cache.investigate.tasks') ? project.getProperty('cache.investigate.tasks').split(',') : [
            ':dependencyManagement:generateGradleApiPackageList'
        ]

        gradle.addListener(new TaskExecutionAdapter() {
            @Override
            void beforeExecute(Task task) {
                if (task.getPath() in tasksToInvestigateForCache) {
                    def buildScan = task.project.buildScan
                    task.inputs.properties.each { name, value ->
                        buildScan.value "${task.path}-input-${name}", String.valueOf(value)
                    }
                    def fileProperties = task.inputs.fileProperties
                    fileProperties.each { inputProperty ->
                        def name = inputProperty.propertyName
                        def snapshotter = gradle.services.get(inputProperty.snapshotter)
                        def snapshot = snapshotter.snapshot(inputProperty.getPropertyFiles(), inputProperty.getCompareStrategy(), inputProperty.getSnapshotNormalizationStrategy())
                        def prefix = "${task.path}-input-${name}"
                        buildScan.value "${prefix}-hash", hashKey(snapshot)
                        def propertyFiles = inputProperty.propertyFiles
                        int idx = 0
                        propertyFiles.visitRootElements(new FileCollectionVisitor() {
                            void visitCollection(FileCollectionInternal fileCollection) {
                                buildScan.value "${prefix}-${idx}-fileCollection", fileCollection.toString()
                                buildScan.value "${prefix}-${idx}-fileCollection-path", String.valueOf(fileCollection.files)
                                idx++
                            }

                            void visitTree(FileTreeInternal fileTree) {
                                buildScan.value "${prefix}-${idx}-fileTree", fileTree.toString()
                                idx++
                            }

                            void visitDirectoryTree(DirectoryFileTree directoryTree) {
                                buildScan.value "${prefix}-${idx}-dirTree", directoryTree.toString()
                                idx++
                            }
                        })
                    }
                    def hasher = gradle.services.get(ClassLoaderHierarchyHasher)
                    new Visitor(task.project.buildScan, hasher, task).visit(task.getClass().getClassLoader())
                    int actionIndex = 0
                    task.actionClassLoaders.each { new Visitor(task.project.buildScan, hasher, "${task.path}-action-classloader-${actionIndex++}").visit(it) }
                }
            }

            @Override
            void afterExecute(Task task, TaskState state) {
                if (task.getPath() in tasksToInvestigateForCache) {
                    def buildScan = task.project.buildScan
                    addTaskState(task, state)
                }
            }

            private static addTaskState(Task task, TaskState state) {
                task.project.buildScan.value(task.getPath(), state.getOutcome().name())
            }

            private static String hashKey(some) {
                def builder = new DefaultBuildCacheKeyBuilder()
                some.appendToCacheKey(builder)
                builder.build().getHashCode()
            }
        })
    }
}

class Visitor extends org.gradle.internal.classloader.ClassLoaderVisitor {
    final buildScan
    final ClassLoaderHierarchyHasher hasher
    final String prefix
    int counter

    Visitor(buildScan, ClassLoaderHierarchyHasher hasher, Task task) {
        this(buildScan, hasher, "${task.path}-classloader")
    }

    Visitor(buildScan, ClassLoaderHierarchyHasher hasher, String prefix) {
        this.buildScan = buildScan
        this.hasher = hasher
        this.prefix = prefix
    }

    private String classloaderHash(ClassLoader loader) {
        def hash = hasher.getClassLoaderHash(loader)
        if (hash != null) {
            new ByteArrayToStringer(hash.asBytes()).toString()
        } else {
            null
        }
    }

    @Override
    void visit(ClassLoader classLoader) {
        def hash = classloaderHash(classLoader)
        if (hash) {
            def classloaderName = classLoader.getClass().getSimpleName()
            buildScan.value("${prefix}-${counter++}-${ classloaderName}-hash", hash)
            if ((counter <= 2) && (classLoader instanceof URLClassLoader && (!classloaderName.contains('ExtClassLoader')))) {
                buildScan.value("${prefix}-${counter - 1}-classpath", classLoader.getURLs().join(':'))
            }
        }
        super.visit(classLoader)
    }
}

