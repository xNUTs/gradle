import org.gradle.build.ReproduciblePropertiesWriter
import org.gradle.build.ClasspathManifest

import java.util.jar.Attributes

apply plugin: 'groovy'

archivesBaseName = "gradle-${name.replaceAll("\\p{Upper}") { "-${it.toLowerCase()}" }}"

sourceCompatibility = 1.7

ext {
    compileTasks = tasks.matching { it instanceof JavaCompile || it instanceof GroovyCompile }
    testTasks = tasks.withType(Test)
    generatedResourcesDir = file("$buildDir/generated-resources/main")
    generatedTestResourcesDir = file("$buildDir/generated-resources/test")
    jarTasks = tasks.withType(Jar)
}

dependencies {
    testCompile libraries.junit, libraries.jmock, libraries.spock
}

// Extracted as it's also used by buildSrc
apply from: "$rootDir/gradle/compile.gradle"

task classpathManifest(type: ClasspathManifest)

sourceSets {
    main.output.dir generatedResourcesDir, builtBy: classpathManifest
}

testTasks.all { task ->
    maxParallelForks = rootProject.maxParallelForks
    if (isCiServer) {
        systemProperties['org.gradle.test.maxParallelForks'] = maxParallelForks
        systemProperties['org.gradle.ci.agentCount'] = 2
        systemProperties['org.gradle.ci.agentNum'] = rootProject.agentNum
    }
    if (javaVersion.java7) {
        // enable class unloading
        task.jvmArgs '-XX:+UseConcMarkSweepGC', '-XX:+CMSClassUnloadingEnabled'
    }
    doFirst {
        if (isCiServer) {
            println "maxParallelForks for '$task.path' is $task.maxParallelForks"
        }
    }
}

jarTasks.all { jar ->
    jar.version = baseVersion
    jar.manifest.mainAttributes(
        (Attributes.Name.IMPLEMENTATION_TITLE.toString()): 'Gradle',
        (Attributes.Name.IMPLEMENTATION_VERSION.toString()): baseVersion
    )
}

// Configures the project to use the test fixtures from another project, which by default is core.
// Note this is not used to create test fixtures in this project, see gradle/testFixtures.gradle for that
ext.useTestFixtures = { params = [:] ->
    def projectPath = params.project ?: ":core"
    def sourceSet = params.sourceSet ?: "test"
    def compileConfiguration = sourceSet == "main" ? "compile" : "${sourceSet}Compile"
    def runtimeConfiguration = sourceSet == "main" ? "runtime" : "${sourceSet}Runtime"

    dependencies {
        add(compileConfiguration, project(path: projectPath, configuration: "testFixturesUsageCompile"))
        add(compileConfiguration, project(':internalTesting'))
        add(runtimeConfiguration, project(path: projectPath, configuration: "testFixturesUsageRuntime"))
    }
}

if (file("src/testFixtures").exists()) {
    apply from: "$rootDir/gradle/testFixtures.gradle"
}

apply from: "$rootDir/gradle/integTest.gradle"


if (file("src/performanceTest").exists()) {
    apply from: "$rootDir/gradle/performanceTest.gradle"
}

if (file("src/jmh").exists()) {
    apply from: "$rootDir/gradle/jmh.gradle"
}

// This is here mostly for the TravisCI build.
// It advertises as an ANSI capable terminal but isn't, so we run with -q there to make
// the output legible, but we still want test result info
if (buildTypes.pullRequestValidation.active) {
    tasks.withType(Test) {
        testLogging {
            quiet {
                events "failed"
                exceptionFormat "full"
            }
        }
    }
}

task compileAll {
    dependsOn tasks.matching { it instanceof JavaCompile || it instanceof GroovyCompile }
}
