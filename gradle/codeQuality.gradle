apply plugin: 'checkstyle'
apply plugin: 'codenarc'

plugins.withType(JavaBasePlugin) {
    // Apply to all projects depending on :core
    configurations.compile.dependencies.withType(ProjectDependency).matching { it.dependencyProject == project(":core") }.all {
        project.apply from: "$rootDir/gradle/taskProperties.gradle"
    }
}

def configDir = new File(buildscript.sourceFile.parentFile.parentFile, 'config')

ext.checkstyleConfigDir = "$configDir/checkstyle"

checkstyle {
    configFile = new File(checkstyleConfigDir, "checkstyle.xml")
    configProperties.checkstyleConfigDir = checkstyleConfigDir
}

codenarc {
    configFile = new File(configDir, "codenarc.xml")
}

tasks.withType(CodeNarc) {
    reports.xml.enabled = true
}

configurations.codenarc.resolutionStrategy.force(libraries.groovy)

plugins.withType(GroovyBasePlugin) {
    sourceSets.all { sourceSet ->
        task "${sourceSet.getTaskName('checkstyle', 'groovy')}"(type: Checkstyle) {
            configFile = new File(checkstyleConfigDir, "checkstyle-groovy.xml")
            source sourceSet.allGroovy
            classpath = sourceSet.compileClasspath
            reports.xml.destination new File(checkstyle.reportsDir, "${sourceSet.name}-groovy.xml")
        }
    }
}

def codeQualityTasks = tasks.matching { task ->
    [org.gradle.api.plugins.quality.CodeNarc, org.gradle.api.plugins.quality.Checkstyle, org.gradle.plugin.devel.tasks.ValidateTaskProperties].any { it.isInstance(task) }
}

tasks.withType(Checkstyle) { task ->
    // We add an absolute path to configProperties for every checkstyle path
    // In order to make the task relocatable and therefore cacheable between machines
    // we need to remove the absolute path from the input and "do the right thing",
    // which in this case is adding the directory as an input with relative path sensitivity
    String configDirPropertyName = 'checkstyleConfigDir'
    task.inputs.property('configProperties') { task.configProperties - [(configDirPropertyName): task.configProperties[configDirPropertyName]] }
    task.inputs.dir(checkstyleConfigDir)
        .withPropertyName(configDirPropertyName)
        .withPathSensitivity(PathSensitivity.RELATIVE)
}

task codeQuality {
    dependsOn codeQualityTasks
}
