import groovy.xml.XmlUtil
import org.gradle.build.*

// GradleConnector entry point requires Java 5
sourceCompatibility = javaVersion.java9Compatible ? 1.6 : 1.5

configurations {
    testPublishRuntime
}

dependencies {
    compile project(':core')
    compile project(':messaging')
    compile project(':wrapper')
    compile project(':baseServices')
    publishCompile libraries.slf4j_api

    testFixturesCompile project(':baseServicesGroovy')
    testFixturesCompile project(':internalIntegTesting')
    testCompile libraries.groovy

    // Need these to be loaded into the integTestRuntime, so that the modules are available on the classpath and the services can be registered
    // I think this is only really required for the TAPI tests in embedded mode, where we use `GradleConnector.useClasspathDistribution()`.
    integTestRuntime project(':ide')
    integTestRuntime project(':buildInit')
    integTestRuntime project(':buildComparison')
    integTestRuntime project(":ivy")
    integTestRuntime project(":maven")
    integTestRuntime project(":compositeBuilds")

    integTestRuntime project(":toolingApiBuilders")
}

useTestFixtures()
useTestFixtures(project: ":logging")
useTestFixtures(project: ':dependencyManagement')
useTestFixtures(project: ':ide')

forkingIntegTest {
    if (isCiServer) {
        maxParallelForks = Math.min(2, rootProject.maxParallelForks)
    }
}

parallelIntegTest {
    enabled = false //tooling integ tests use parallel settings, don't run
}

daemonIntegTest {
    enabled = false //tooling integ tests use daemon anyway, don't rerun
}

task shadedJarWithoutVersion(type: ShadedJar) {
    ext.outputDir = file("$buildDir/shaded-jar-without-version")
    sourceFiles = jar.inputs.files +
        files { (configurations.runtime - configurations.publishCompile).collect { zipTree(it) } }
    analysisFile = file("$outputDir/analysis.txt")
    classesDir = file("$outputDir/classes")
    jarFile = file("$outputDir/gradle-tooling-api-shaded-${baseVersion}.jar")
    keepPackages = ["org.gradle.tooling"]
    unshadedPackages = ["org.gradle", "org.slf4j"]
    ignorePackages = ["org.gradle.tooling.provider.model"]
    shadowPackage = "org.gradle.internal.impldep"
}

task toolingApiShadedJar(type: Zip) {
    ext.buildReceipt = project(':versionInfo').createBuildReceipt
    destinationDir file("$buildDir/shaded-jar")
}

task testToolingApiShadedJar(type: Zip) {
    ext.buildReceipt = project(':versionInfo').createTestBuildReceipt
    outputs.cacheIf { true }
    destinationDir file("$buildDir/shaded-jar-with-test-version")
}

configure([toolingApiShadedJar, testToolingApiShadedJar]) {
    dependsOn shadedJarWithoutVersion, buildReceipt
    from zipTree(shadedJarWithoutVersion.jarFile)
    baseName = 'gradle-tooling-api-shaded'
    from(buildReceipt) {
        into '/org/gradle'
    }
    extension 'jar'
    version baseVersion
}

apply from: 'buildship.gradle'

sourceJar {
    configurations.compile.allDependencies.withType(ProjectDependency).each {
        from it.dependencyProject.sourceSets.main.groovy.srcDirs
        from it.dependencyProject.sourceSets.main.java.srcDirs
    }
}

eclipse {
    classpath {
        file.whenMerged { classpath ->
            //**TODO
            classpath.entries.removeAll { it.path.contains('src/test/groovy') }
            classpath.entries.removeAll { it.path.contains('src/integTest/groovy') }
        }
    }
}

task generateFixedVersionPom {
    dependsOn generatePom
    ext.fixedVersionPomFile = new File(temporaryDir, 'pom.xml')
    outputs.files(fixedVersionPomFile)
    inputs.file { generatePom.pomFile } withPropertyName 'pomFile' withPathSensitivity PathSensitivity.NONE
    inputs.property("testedVersion", { testedVersion })
    doLast {
        def xml = new XmlParser().parse(generatePom.pomFile)
        xml.version[0].value = testedVersion
        fixedVersionPomFile.parentFile.mkdirs()
        fixedVersionPomFile.createNewFile()
        fixedVersionPomFile.text = XmlUtil.serialize(xml)
    }
}

artifacts {
    publishRuntime file: toolingApiShadedJar.archivePath, name: archivesBaseName, type: 'jar', builtBy: toolingApiShadedJar

    testPublishRuntime jar
    testPublishRuntime sourceJar
    testPublishRuntime file: testToolingApiShadedJar.archivePath, name: archivesBaseName, type: 'jar', builtBy: testToolingApiShadedJar
    testPublishRuntime new org.gradle.api.internal.artifacts.publish.DefaultPublishArtifact(archivesBaseName, 'pom', 'pom', null, new Date(), generateFixedVersionPom.fixedVersionPomFile, generateFixedVersionPom)
}

task publishLocalArchives(type: Upload) {
    configuration = configurations.testPublishRuntime
    dependsOn generateFixedVersionPom
    uploadDescriptor = false
    repositories {
        ivy {
            artifactPattern "${rootProject.file('build/repo')}/${project.group.replaceAll('\\.', '/')}/${archivesBaseName}/${testedVersion}/[artifact]-${testedVersion}(-[classifier]).[ext]"
        }
    }
}

integTestTasks.all {
    requiresBinZip = true
    requiresLibsRepo = true
}

verifyTestFilesCleanup.errorWhenNotEmpty = false

