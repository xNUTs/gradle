/**
 * We don't yet have support for Checkstyle in the Java Software Model. And we don't want to add non-model code
 * to configure the real Checkstyle extension, because it will hide some of the new-model configuration improvements.
 * So we configure a CheckstyleExtension without correctly wiring it for execution.
 *
 * This adds configuration-time weight without legacy overhead. The 'old-java-plugin' is configured in a similar way.
 */
import org.gradle.model.*

plugins {
    id 'jvm-component'
    id 'java-lang'
}

model {
    components {
        main(JvmLibrarySpec)
    }
    tasks {
        create("test", Test) {
            dependsOn "jar", "compileTestJava", "processTestResources"
        }
        create("compileTestJava", JavaCompile) {
            dependsOn "jar"
        }
        create("processTestResources", Copy) {

        }
        create("extraTask1", MyTaskClass) {
            description = name
            doLast {}
        }
        create("extraTask2", MyTaskClass) {
            description = name
            doLast {}
        }
        create("extraTask3", MyTaskClass) {
            description = name
            doLast {}
        }
        create("extraTask4", MyTaskClass) {
            description = name
            doLast {}
        }
    }
    tasks.check {
        dependsOn "test"
    }
    tasks.build {
        // not quite parity with the old build, we have no way of expressing
        // tasks.build.dependsOn tasks.withType(Checkstyle)
        dependsOn \$("tasks.checkstyleMain"), \$("tasks.checkstyleTest")
    }

    checkstyle(MyCheckstyleExtension) {
        ignoreFailures = true
    }

    tasks {
        create("checkstyleMain", Checkstyle)
        create("checkstyleTest", Checkstyle)
        withType(Checkstyle, CheckstyleTaskDefaults)
    }

    custom(CustomExtension) {
        action = { println "" }
        value = "."
    }

    tasks {
        withType(MyTaskClass, TaskWiring)
    }

}
